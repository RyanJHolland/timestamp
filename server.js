 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

function unix_to_natural(unix) {
  var natural = new Date(unix);
  return(natural);
};

function natural_to_unix(natural) {
  var unix = new Date();
  unix.UTC(natural);
  return(unix);
};

app.route('/:date')              // if they put a param in the url
  .get(function(req, res) {
    var date = req.params.date;
    if (!isNaN(date)) {          // if it is a number
      date = unix_to_nat(date); 
    } else {
      date = nat_to_unix(date);
    };
  res.json(date);
})


app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })


var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

function unix_to_nat(unix) {
  unix = parseInt(unix); // the arg is in str format, so we use parseInt to change str to num
  var nat = new Date(unix*1000);    // milliseconds to seconds conversion is required because of javascript Date format
  if (nat!=null) {
    nat = months[nat.getMonth()] + ' ' + nat.getDate() + ', ' + nat.getFullYear();
    return {unix, nat};
  } else {
    return {"unix":null, "nat":null};
  }
};

function nat_to_unix(nat) {
  var unix = new Date(nat).getTime()/1000;     // convert natural language to Date, convert Date to unix t.s., convert msec to sec
  if ( !unix ) {
    return {unix, "nat":null};
  } else {
    return {unix, nat};
  }
};

/*
// is the request a string of 10 digits?
app.route(/^\/\d{10}$/)
  .get(function(req, res) {
    var converted = unix_to_natural(req);
    res.json(converted);
})


app.route('/duck')
  .get(function(req, res) {
  res.type('txt').send('quack');
})
  

  */

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

